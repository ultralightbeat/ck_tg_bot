import telebot
import json
import datetime
import subprocess
import re
import logging
from openai import OpenAI
import gspread
from oauth2client.service_account import ServiceAccountCredentials


TOKEN = "YO"
bot = telebot.TeleBot(TOKEN)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
def start_keyboard():
    start_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_keyboard.add(telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å ‚ñ∂Ô∏è"))
    start_keyboard.add(telebot.types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É ‚ùì"))
    return start_keyboard

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É"
def back_keyboard():
    back_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_keyboard.add(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥ üö™"))
    back_keyboard.add(telebot.types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É ‚ùì"))
    return back_keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,
                 "–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å",
                 reply_markup=start_keyboard())
def analyze_events(user_input, target_word):
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenAI GPT-3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    openai = OpenAI(
        api_key="YOUR_API_KEY",
        base_url="https://api.deepinfra.com/v1/openai",
    )

    chat_completion = openai.chat.completions.create(
        model="mistralai/Mixtral-8x7B-Instruct-v0.1",
        messages=[{"role": "user", "content": f"–ï—Å—Ç—å —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, "
               f"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ, "
               f"–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, "
               f"–û—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, "
               f"–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è, –ì–∏–±–∫–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è, "
               f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, "
               f"–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –ú–æ–∑–≥ –°—Ç—É–¥–µ–Ω—Ç–∞, "
               f"–†–µ–∑—é–º–µ,"
               f"–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, "
               f"–ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã, "
               f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, "
               f"–í—ã–±–æ—Ä, –º–æ—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –∂–∏–∑–Ω–∏, "
               f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –ø–æ—Å–æ–≤–µ—Ç—É–π –º–Ω–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–Ω–∏–≥–æ–≤ –µ—Å–ª–∏ —è —Ö–æ—á—É: {user_input}. –ü—Ä–∏–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç—Ä–µ–Ω–Ω–∏–Ω–≥. –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç—Ä–µ–Ω–∏–Ω–≥ ..."}],
    )
    response = chat_completion.choices[0].message.content
    print(response)

    match = re.search(r'\b—Ç—Ä–µ–Ω–∏–Ω–≥\b', response, re.IGNORECASE)

    if match:
        # –ï—Å–ª–∏ "—Ç—Ä–µ–Ω–∏–Ω–≥" –Ω–∞–π–¥–µ–Ω, –Ω–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        next_word_match = re.search(r'\b\w+\b', response[match.end():])

        if next_word_match:
            next_word = next_word_match.group()
            print(next_word)
            return next_word
    else:
        print("–Ø –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏  –ø–æ–ø—Ä—É–±–µ–π—Ç–µ –µ—â–µ —Ä–∞–∑")
def add_question_to_google_sheet(user_id, username, question):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name('YOUR_JSON', scope)

    client = gspread.authorize(creds)

    # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    sheet = client.open('CK_APPEALS').sheet1

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    row = [user_id, username, question]
    sheet.append_row(row)

def collect_posts(channel):
    with open(f"{channel}.txt") as file:
        file = file.readlines()
    posts = []
    for n, line in enumerate(file):
        file[n] = json.loads(file[n])
        # –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª
        links = [link for link in file[n]['outlinks'] if channel not in link]
        # –ü–æ—Å—Ç
        p = str(file[n]['content']) + "\n\n" + str("\n".join(links))
        posts.append(p)
    return posts
def clear_data(channel):
    with open(f"{channel}.txt", 'w') as file:
        pass
def upload_posts(channel):
    today = datetime.date.today()
    start_of_month = today.replace(day=1)
    command = f'snscrape --since {start_of_month} --jsonl telegram-channel {channel} > {channel}.txt'
    subprocess.run(command, shell=True)
def find_posts_by_keyword(keyword, channel):
    # –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
    posts = collect_posts(channel)
    # –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    found_posts = [post for post in posts if keyword.lower() in post.lower()]
    return found_posts


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    if message.text == "–ù–∞—á–∞—Ç—å ‚ñ∂Ô∏è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–µ–º—É –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞—É—á–∏—Ç—å—Å—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø —Ö–æ—á—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")
        bot.register_next_step_handler(message, search_posts)
    elif message.text == "–ù–∞–∑–∞–¥ üö™":
        bot.send_message(message.chat.id,
                         "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=start_keyboard())
    elif message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É ‚ùì":
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.", reply_markup=back_keyboard())
        bot.register_next_step_handler(message, process_feedback_text)  # –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ process_feedback_text

def search_posts(message):
    try:
        user_input = message.text
        target_word=""
        target_word = analyze_events(user_input, target_word)
        print(target_word)
        channel = 'guapck'
        upload_posts(channel)
        found_posts = find_posts_by_keyword(target_word, channel)
        if found_posts:
            bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:")
            for post in found_posts:
                bot.send_message(message.chat.id, post)
        else:
            logging.error("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            bot.send_message(message.chat.id,
                             "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ.",
                             reply_markup=back_keyboard())
        clear_data(channel)

    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    bot.send_message(message.chat.id, f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å")


def process_feedback_text(message):  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    try:
        add_question_to_google_sheet(message.from_user.id, message.from_user.username, message.text)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è.")
    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    bot.polling()
